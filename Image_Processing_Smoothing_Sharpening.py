# -*- coding: utf-8 -*-
"""Image_Assignment_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S4Ull4npWHpBPI-d1TG78EMp5hBjDDmR

# The smoothing Exp
"""

import random
import cv2
import numpy as np
from matplotlib import pyplot as plt
from scipy import ndimage, misc

def add_noise(img):

	# Getting the dimensions of the image
	row , col = img.shape
	
	# Randomly pick some pixels in the
	# image for coloring them white
	# Pick a random number between 300 and 10000
	number_of_pixels = random.randint(300, 10000)
	for i in range(number_of_pixels):
	
		# Pick a random y coordinate
		y_coord=random.randint(0, row - 1)
		
		# Pick a random x coordinate
		x_coord=random.randint(0, col - 1)
		
		# Color that pixel to white
		img[y_coord][x_coord] = 255
		
	# Randomly pick some pixels in
	# the image for coloring them black
	# Pick a random number between 300 and 10000
	number_of_pixels = random.randint(300 , 10000)
	for i in range(number_of_pixels):
	
		# Pick a random y coordinate
		y_coord=random.randint(0, row - 1)
		
		# Pick a random x coordinate
		x_coord=random.randint(0, col - 1)
		
		# Color that pixel to black
		img[y_coord][x_coord] = 0
		
	return img

# salt-and-pepper noise can
# be applied only to grayscale images
# Reading the color image in grayscale image
img = cv2.imread('/content/B2DBy.jpg',
				cv2.IMREAD_GRAYSCALE)

#Storing the image
cv2.imwrite('salt-and-pepper.jpg',
			add_noise(img))

"""# Original Image"""

from PIL import Image

fname = '/content/B2DBy.jpg'
image = Image.open(fname).convert("L")
arr = np.asarray(image)
plt.imshow(arr, cmap='gray', vmin=0, vmax=255)
plt.show()

"""# Noisy Image"""

Nosiy_image = cv2.imread('/content/salt-and-pepper.jpg',
				cv2.IMREAD_GRAYSCALE)

from PIL import Image

fname = '/content/salt-and-pepper.jpg'
image = Image.open(fname).convert("L")
arr = np.asarray(image)
plt.imshow(arr, cmap='gray', vmin=0, vmax=255)
plt.show()

"""# Average Filter 3x3"""

kernel = np.ones((3,3),np.float32)/9
Average_filter_1 = cv2.filter2D(Nosiy_image,-1,kernel,cv2.COLOR_BGR2GRAY)

plt.imshow(cv2.cvtColor(Average_filter_1, cv2.COLOR_BGR2RGB))

"""# Average Filter 5x5"""

kernel = np.ones((5,5),np.float32)/25
Average_filter_2 = cv2.filter2D(Nosiy_image,-1,kernel,cv2.COLOR_BGR2GRAY)

plt.imshow(cv2.cvtColor(Average_filter_2, cv2.COLOR_BGR2RGB))

"""# Average Filter 7x7"""

kernel = np.ones((7,7),np.float32)/49
Average_filter_3 = cv2.filter2D(Nosiy_image,-1,kernel,cv2.COLOR_BGR2GRAY)

plt.imshow(cv2.cvtColor(Average_filter_3, cv2.COLOR_BGR2RGB))

"""# Median Filter 3x3"""

Median_filter_1 = cv2.medianBlur(Nosiy_image,3)

plt.imshow(cv2.cvtColor(Median_filter_1, cv2.COLOR_BGR2RGB))

"""# Median Filter 5x5"""

Median_filter_2 = cv2.medianBlur(Nosiy_image,5)

plt.imshow(cv2.cvtColor(Median_filter_2, cv2.COLOR_BGR2RGB))

"""# Median Filter 7x7"""

Median_filter_3 = cv2.medianBlur(Nosiy_image,7)

plt.imshow(cv2.cvtColor(Median_filter_3, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 10 & size = 7"""

Rank_filter_1 = ndimage.rank_filter(Nosiy_image, rank=10, size=7)

plt.imshow(cv2.cvtColor(Rank_filter_1, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 10 & size = 10"""

Rank_filter_2 = ndimage.rank_filter(Nosiy_image, rank=10, size=10)

plt.imshow(cv2.cvtColor(Rank_filter_2, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 10 & size = 20"""

Rank_filter_3 = ndimage.rank_filter(Nosiy_image, rank=10, size=20)

plt.imshow(cv2.cvtColor(Rank_filter_3, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 20 & size = 7"""

Rank_filter_4 = ndimage.rank_filter(Nosiy_image, rank=20, size=7)

plt.imshow(cv2.cvtColor(Rank_filter_4, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 20 & size = 10"""

Rank_filter_5 = ndimage.rank_filter(Nosiy_image, rank=20, size=10)

plt.imshow(cv2.cvtColor(Rank_filter_5, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 20 & size = 20"""

Rank_filter_6 = ndimage.rank_filter(Nosiy_image, rank=20, size=20)

plt.imshow(cv2.cvtColor(Rank_filter_6, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 42 & size = 7"""

Rank_filter_7 = ndimage.rank_filter(Nosiy_image, rank=42, size=7)

plt.imshow(cv2.cvtColor(Rank_filter_7, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 42 & size = 10"""

Rank_filter_8 = ndimage.rank_filter(Nosiy_image, rank=42, size=10)

plt.imshow(cv2.cvtColor(Rank_filter_8, cv2.COLOR_BGR2RGB))

"""# Rank Filter with rank = 42 & size = 20"""

Rank_filter_9 = ndimage.rank_filter(Nosiy_image, rank=42, size=20)

plt.imshow(cv2.cvtColor(Rank_filter_9, cv2.COLOR_BGR2RGB))

"""#Which smoothing filter removes the noise in a better way? Why?

Median filter because the median filter is one of the well-known order-statistic filters due to its good performance for some specific noise types such as “Gaussian,” “random,” and “salt and pepper” noises

#What is the effect of changing the window size?

More smoothing and decreasing noise when the window size is bigger

#When utilizing the rank order filter, what is the effect of changing the rank?

The best rank is median filter as if decrease or incearse it become very sensitive to outlier

#The sharpening Exp
"""

#encoding:utf-8
#By:Eastmount CSDN 2021-07-19
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Read images 
img = cv2.imread('/content/B2DBy.jpg')

"""#Perwitt_x,y 3x3"""

#Roberts operator 
p_3_x = np.array([[1,1,1],[0,0,0],[-1,-1,-1]], dtype=int)
p_3_y = np.array([[-1,0,1],[-1,0,1],[-1,0,1]], dtype=int)

conv_p_x = cv2.filter2D(img, cv2.CV_16S, p_3_x)
conv_p_y = cv2.filter2D(img, cv2.CV_16S, p_3_y)

# turn uint8 
absX = cv2.convertScaleAbs(conv_p_x)
absY = cv2.convertScaleAbs(conv_p_y)
Roberts_3 = cv2.addWeighted(absX,0.5,absY,0.5,0)



# The graphics 
titles = [u' original image ', u'Perwitt']
images_p_3_xy = [img, Roberts_3]
for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_p_3_xy[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#Perwitt 3x3 x"""

# The graphics 
titles = [u' original image ', u'Perwitt 3x3 x']
images_p_3_x = [img, conv_p_x]
for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_p_3_x[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#Perwitt 3x3 y"""

# The graphics 
titles = [u' original image ', u'Perwitt 3x3 y']
images_p_3_y = [img, conv_p_y]
for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_p_3_y[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#Perwitt_x,y 5x5"""

#Roberts operator 
p_5_x = np.array([[2,2,2,2,2],[1,1,1,1,1],[0,0,0,0,0],[-1,-1,-1,-1,-1],[-2,-2,-2,-2,-2]], dtype=int)
p_5_y = np.array([[-2,-1,0,1,2],[-2,-1,0,1,2],[-2,-1,0,1,2],[-2,-1,0,1,2],[-2,-1,0,1,2]], dtype=int)

conv_p_x = cv2.filter2D(img, cv2.CV_16S, p_5_x)
conv_p_y = cv2.filter2D(img, cv2.CV_16S, p_5_y)

# turn uint8 
absX_5 = cv2.convertScaleAbs(conv_p_x)
absY_5 = cv2.convertScaleAbs(conv_p_y)
Roberts_5 = cv2.addWeighted(absX_5,0.5,absY_5,0.5,0)



# The graphics 
titles = [u' original image ', u'Perwitt 5x5']
images_p_5_xy = [img, Roberts_5]
for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_p_5_xy[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#Perwitt_x 5x5"""

# The graphics 
titles = [u' original image ', u'Perwitt x']
images_p_5_x = [img, conv_p_x]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_p_5_x[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#Perwitt_y 5x5"""

# The graphics 
titles = [u' original image ', u'Perwitt y']
images_p_5_y = [img, conv_p_y]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_p_5_y[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#sobel 3x3 xy"""

#Roberts operator 
s_3_x = np.array([[-1,0,1],[-2,0,2],[-1,0,1]], dtype=int)
s_3_y = np.array([[1,2,1],[0,0,0],[-1,-2,-1]], dtype=int)

conv_s_x = cv2.filter2D(img, cv2.CV_16S, s_3_x)
conv_s_y = cv2.filter2D(img, cv2.CV_16S, s_3_y)

# turn uint8 
absX_s_3 = cv2.convertScaleAbs(conv_s_x)
absY_s_3 = cv2.convertScaleAbs(conv_s_y)
Roberts_s_3 = cv2.addWeighted(absX_s_3 ,0.5,absY_s_3 ,0.5,0)



# The graphics 
titles = [u' original image ', u'sobel']
images_s_3_xy = [img, Roberts_s_3]
for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_s_3_xy[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#sobel_x 3x3"""

# The graphics 
titles = [u' original image ', u'sobel x']
images_s_3_x = [img, conv_s_x]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_s_3_x[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#Sobel_y 3x3"""

# The graphics 
titles = [u' original image ', u'sobel y']
images_s_3_y = [img, conv_s_y]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_s_3_y[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#soble 5x5 xy"""

#Roberts operator 
s_5_x = np.array([[2,2,4,2,2],[1,1,2,1,1],[0,0,0,0,0],[-1,-1,-2,-1,-1],[-2,-2,-4,-2,-2]], dtype=int)
s_5_y = np.array([[2,1,0,-1,-2],[2,1,0,-1,-2],[4,2,0,-2,-4],[2,1,0,-1,-2],[2,1,0,-1,-2]], dtype=int)

conv_s_x_5 = cv2.filter2D(img, cv2.CV_16S, s_5_x)
conv_s_y_5= cv2.filter2D(img, cv2.CV_16S, s_5_y)

# turn uint8 
absX_s_5 = cv2.convertScaleAbs(conv_s_x_5)
absY_s_5 = cv2.convertScaleAbs(conv_s_y_5)
Roberts_s_5 = cv2.addWeighted(absX_s_5 ,0.5,absY_s_5 ,0.5,0)



# The graphics 
titles = [u' original image ', u'sobrl']
images_s_5_xy = [img, Roberts_s_5]
for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_s_5_xy[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#Sobel_x 5x5"""

# The graphics 
titles = [u' original image ', u'sobel x']
images_s_5_x = [img, conv_s_x_5]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_s_5_x[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#sobel_y 5x5"""

# The graphics 
titles = [u' original image ', u'sobel y']
images_s_5_y = [img, conv_s_y_5]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_s_5_y[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#laplacian 3x3"""

laplacian = np.array([[-1,0,-1],[0,4,0],[-1,0,-1]], dtype=int)

laplacian__ = cv2.filter2D(img, cv2.CV_16S, laplacian) 

# The graphics 
titles = [u' original image ', u'laplacian']
images = [img, laplacian__]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

laplacian_2 = np.array([[0,-1,0],[-1,4,-1],[0,-1,0]], dtype=int)

laplacian__2 = cv2.filter2D(img, cv2.CV_16S, laplacian_2) 

# The graphics 
titles = [u' original image ', u'laplacian2']
images = [img, laplacian__2]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

laplacian_3 = np.array([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]], dtype=int)

laplacian__3 = cv2.filter2D(img, cv2.CV_16S, laplacian_3) 

# The graphics 
titles = [u' original image ', u'laplacian3']
images = [img, laplacian__3]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#laplacian 5x5"""

laplacian = np.array([[0,0,1,0,0],[0,1,2,1,0],[1,2,-16,2,1],[0,1,2,1,0],[0,0,1,0,0]], dtype=int)

conv_l_5 = cv2.filter2D(img, cv2.CV_16S, laplacian) 

# The graphics 
titles = [u' original image ', u'laplacian']
images_l_5 = [img, conv_l_5]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_l_5[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#log filter 3x3"""

# Apply Gaussian Blur
blur_3 = cv2.GaussianBlur(img,(3,3),0)
 
# Apply Laplacian operator in some higher datatype
laplacian_3 = cv2.Laplacian(blur_3,cv2.CV_64F)


# The graphics 
titles = [u' original image ', u'log 3x3']
images_3 = [img, laplacian_3]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_3[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()

"""#log filter 5x5"""

# Apply Gaussian Blur
blur_5 = cv2.GaussianBlur(img,(5,5),0)
 
# Apply Laplacian operator in some higher datatype
laplacian_5 = cv2.Laplacian(blur_5,cv2.CV_64F)


# The graphics 
titles = [u' original image ', u'log 3x3']
images_5 = [img, laplacian_5]

for i in range(2):
  plt.subplot(1,2,i+1), plt.imshow(images_5[i], 'gray')
  plt.title(titles[i])
  plt.xticks([]),plt.yticks([])
  plt.show()